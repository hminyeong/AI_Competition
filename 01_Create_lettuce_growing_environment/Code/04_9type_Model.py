# -*- coding: utf-8 -*-
"""Lettuce(9type_model).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oYj9qNT9fErKE5I-s_xRfBAGbcBqaU2Z

##### 데이터 시각화할 때 한글 깨지면 실행할 코드
"""

# 해당 셀 실행하고 런타임 다시시작 후 아래 셀 실행
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import matplotlib.pyplot as plt

plt.rc('font', family='NanumBarunGothic')

"""## Import """

from google.colab import drive
drive.mount('/content/drive')

!pip install optuna

!pip install bayesian-optimization

# Commented out IPython magic to ensure Python compatibility.
#모듈들을 임포트한다.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.stats import norm
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score, train_test_split, KFold
from scipy import stats

from tqdm import tqdm
from sklearn.linear_model import LinearRegression, ElasticNet, Lasso, Ridge
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.preprocessing import  LabelEncoder
from sklearn.metrics import mean_squared_error
import xgboost as xgb
import lightgbm as lgb
import re

import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

# import optuna
# from optuna.integration import XGBoostPruningCallback
# sns.set_theme(style="darkgrid")

path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/Dataset/my_dataset/"

train_df = pd.read_csv(path+"train_df.csv")
valid_df = pd.read_csv(path+"valid_df.csv")
test_df = pd.read_csv(path+"test_df.csv")

train_target = pd.read_csv(path+"train_target.csv")
valid_target = pd.read_csv(path+"valid_target.csv")
test_target = pd.read_csv(path+"test_target.csv")

"""## Target 값 로그 변환 """

#descriptive statistics summary
train_target['생육일별_잎_중량'].describe()

plt.figure()
sns.displot(train_target['생육일별_잎_중량'], bins=30)
plt.xlabel('case')
plt.title('Distribution of 생육일별_잎_중량')
plt.show()

# 가격 로그 변환 후 원래 가격 따로 저장
train_target['log_weight'] = np.log1p(train_target['생육일별_잎_중량'])
train_real_weight = train_target['생육일별_잎_중량'] # 원래 가격
print(train_target.head(1))

valid_target['log_weight'] = np.log1p(valid_target['생육일별_잎_중량'])
valid_real_weight = valid_target['생육일별_잎_중량'] # 원래 가격
print(valid_target.head(1))

f, (ax1, ax2) = plt.subplots(1,2,figsize=(12,6))

ax1.hist(train_real_weight, bins=30)
ax1.set_title('weight Distribution')
ax1.set_xlabel('weight')

ax2.hist(train_target['log_weight'], bins=30)
ax2.set_title('Log weight Distribution')
ax2.set_xlabel('Log weight')

plt.show()

f, (ax1, ax2) = plt.subplots(1,2,figsize=(12,6))

ax1.hist(valid_real_weight, bins=30)
ax1.set_title('weight Distribution')
ax1.set_xlabel('weight')

ax2.hist(valid_target['log_weight'], bins=30)
ax2.set_title('Log weight Distribution')
ax2.set_xlabel('Log weight')

plt.show()

train_df.columns

"""## Feature Engineering """

def ec_time(df):
  df['여름철_적정_EC관측_누적시간'] = 0

  # 여름철(8월 기준. 온도 19.7-26.7℃, 습도 78-79%) & ec관측치 1.2이상~1.3미만
  index_여름철_적정_EC관측_누적시간 = df.loc[
        ((df['내부온도관측치']>=19.7) & (df['내부온도관측치']<=26.7)) 
      & ((df['내부습도관측치']>=78) & (df['내부습도관측치']<=79))
      & ((df['ec관측치']>=1.2) & (df['ec관측치']<=1.6))].index

  # case 별로 여름철_적정_EC관측_누적시간 구하기 
  df.loc[index_여름철_적정_EC관측_누적시간, '여름철_적정_EC관측_누적시간'] = 1
  df['여름철_적정_EC관측_누적시간'] = df.groupby(['상추'])['여름철_적정_EC관측_누적시간'].apply(lambda x: x.cumsum())
  return df

train_df = ec_time(train_df)
valid_df = ec_time(valid_df)
test_df = ec_time(test_df)

def light_time(df):
  df['광주기_명기_누적시간'] = 0

  index_광주기_명기_누적시간 = df.loc[df['시간당총광량']>0].index

  # case 별로 index_광주기_명기_누적시간 구하기 
  df.loc[index_광주기_명기_누적시간, '광주기_명기_누적시간'] = 1
  df['광주기_명기_누적시간'] = df.groupby(['상추', '생육일'])['광주기_명기_누적시간'].apply(lambda x: x.cumsum())
  return df

train_df = light_time(train_df)
valid_df = light_time(valid_df)
test_df = light_time(test_df)

def combine_feature(df) :
    # 2* 기존 feature들 조합
    df["온도_습도"] = df["내부온도관측치"] * df["내부습도관측치"]
    df["온도_co2"] = df["내부온도관측치"] * df["co2관측치"]
    df["온도_ec"] = df["내부온도관측치"] * df["ec관측치"]
    df["온도_시간당분무량"] = df["내부온도관측치"] * df["시간당분무량"]
    df["온도_시간당총광량"] = df["내부온도관측치"] * df["시간당총광량"]
    df["온도_일간누적총광량"] = df["내부온도관측치"] * df["일간누적총광량"]

    df["습도_co2"] = df["내부습도관측치"] * df["co2관측치"]
    df["습도_ec"] = df["내부습도관측치"] * df["ec관측치"]
    df["습도_시간당분무량"] = df["내부습도관측치"] * df["시간당분무량"]
    df["습도_시간당총광량"] = df["내부습도관측치"] * df["시간당총광량"]
    df["습도_일간누적총광량"] = df["내부습도관측치"] * df["일간누적총광량"]

    df["co2_ec"] = df["co2관측치"] * df["ec관측치"]
    df["co2_시간당분무량"] = df["co2관측치"] * df["시간당분무량"]
    df["co2_시간당총광량"] = df["co2관측치"] * df["시간당총광량"]
    df["co2_일간누적총광량"] = df["co2관측치"] * df["일간누적총광량"]

    df["ec_시간당분무량"] = df["ec관측치"] * df["시간당분무량"]
    df["ec_시간당총광량"] = df["ec관측치"] * df["시간당총광량"]
    df["ec_일간누적총광량"] = df["ec관측치"] * df["일간누적총광량"]

    df["시간당분무량_시간당총광량"] = df["시간당분무량"] * df["시간당총광량"]
    df["시간당분무량_일간누적총광량"] = df["시간당분무량"] * df["일간누적총광량"]

    df["시간당총광량_일간누적총광량"] = df["시간당총광량"] * df["일간누적총광량"]


    # 3* 기존 feature들 조합
    df["온도_습도_co2"] = df["내부온도관측치"] * df["내부습도관측치"] * df["co2관측치"]
    df["온도_습도_ec"] = df["내부온도관측치"] * df["내부습도관측치"] * df["ec관측치"]
    df["온도_습도_시간당분무량"] = df["내부온도관측치"] * df["내부습도관측치"] * df["시간당분무량"]
    df["온도_습도_시간당총광량"] = df["내부온도관측치"] * df["내부습도관측치"] * df["시간당총광량"]
    df["온도_습도_일간누적총광량"] = df["내부온도관측치"] * df["내부습도관측치"] * df["일간누적총광량"]

    df["습도_co2_ec"] = df["내부습도관측치"] * df["co2관측치"] * df["ec관측치"]
    df["습도_co2_시간당분무량"] = df["내부습도관측치"] * df["co2관측치"] * df["시간당분무량"]
    df["습도_co2_시간당총광량"] = df["내부습도관측치"] * df["co2관측치"] * df["시간당총광량"]
    df["습도_co2_일간누적총광량"] = df["내부습도관측치"] * df["co2관측치"] * df["일간누적총광량"]

    df["co2_ec_시간당분무량"] = df["co2관측치"] * df["ec관측치"] * df["시간당분무량"]
    df["co2_ec_시간당총광량"] = df["co2관측치"] * df["ec관측치"] * df["시간당총광량"]
    df["co2_ec_일간누적총광량"] = df["co2관측치"] * df["ec관측치"] * df["일간누적총광량"]

    df["ec_시간당분무량_시간당총광량"] = df["ec관측치"] * df["시간당분무량"] * df["시간당총광량"]
    df["ec_시간당분무량_일간누적총광량"] = df["ec관측치"] * df["시간당분무량"] * df["일간누적총광량"]

    df["시간당분무량_시간당총광량_일간누적총광량"] = df["시간당분무량"] * df["시간당총광량"] * df["일간누적총광량"]
    return df

train_df = combine_feature(train_df)
valid_df = combine_feature(valid_df)
test_df = combine_feature(test_df)

test_df.columns



"""## Modeling

1. 평가지표  
대회의 평가지표는 RMSE이나, 우리는 타겟값에 log를 취했기 때문에 RMSE를 구하는게 RMSLE를 구하는 것과 동치.  
학습에는 이를 사용하고, test 파일에서는 역변환을 해서 RMSE가 제대로 평가될 수 있게 진행.

2. 교차검증

3. 모델 비교  
여러개의 모델을 사용해서 RMSLE를 비교하고, 가장 낮은 RMSLE가 나온 모델을 선정해 튜닝.  
가격을 예측하는 회귀 모형을 사용.   

  -  모델 목록  
Linear Regression  
Ridge Regression  
Lasso Regression  
Elasticnet Regression  
Decision Tree  
RandomForest Regressor  
GradientBoosting Regressor  
XGBoost Regressor  
LightGBM Regressor
"""

test_df.columns

def time_series_df(df, df_target, FEATURES):
  df = df[FEATURES]
  data_list = []
  ts_df = pd.DataFrame()
  for idx in range(len(df_target)): # 644
      time_series = df[24*idx:24*(idx+1)].values  # case1-1, case1-2, case1-3, ...
      time_series = time_series.tolist()
      time_series = sum(time_series, []) # 2 dim -> 1 dim
      time_series_transepose = pd.DataFrame(time_series).transpose()
      ts_df = ts_df.append(time_series_transepose)
      # train_data_list.append(torch.Tensor(time_series))
  return ts_df

FEATURES = ['생육일', '내부온도관측치', '내부습도관측치', 'co2관측치', '시간당분무량', '시간당총광량', '일간누적총광량', 'ec_시간당분무량_시간당총광량']

ts_train_df = time_series_df(train_df, train_target, FEATURES)
ts_valid_df = time_series_df(valid_df, valid_target, FEATURES)
ts_test_df = time_series_df(test_df, test_target, FEATURES)

ts_train_target = train_target['log_weight']
ts_valid_target = train_target['log_weight']
ts_test_target = test_target

ts_train_valid_df = ts_train_df.append(ts_valid_df).reset_index(drop=True)
ts_train_valid_target_df = train_target.append(valid_target).reset_index(drop=True)
ts_train_valid_target_df = ts_train_valid_target_df['log_weight']

print(ts_train_valid_df.shape, ts_train_valid_target_df.shape) # log_weight
print(ts_test_df.shape, ts_test_target.shape)   # 상추	생육일	생육일별_잎_중량

from scipy import sparse

X_train = sparse.csr_matrix(ts_train_valid_df)
Y_train = ts_train_valid_target_df.values 

X_test = ts_test_df
Y_test = test_target

X_train.shape, Y_train.shape

#Validation function
n_folds = 5

def RMSE(y, y_pred):
    rmse = mean_squared_error(y, y_pred) ** 0.5
    return rmse

def rmsle_cv(model):
    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(X_train)
    rmse= np.sqrt(-cross_val_score(model, X_train, Y_train, scoring="neg_mean_squared_error", cv = kf))
    return(rmse)

"""## GradientBoostingRegressor

https://3months.tistory.com/516
"""

model_gb = GradientBoostingRegressor(n_estimators=3000, 
                                     learning_rate=0.05,
                                     max_depth=4,
                                     max_features='sqrt',
                                     min_samples_leaf=15,
                                     min_samples_split=10,
                                     loss='huber',
                                     )

score = rmsle_cv(model_gb)
gb_score = score.mean()
print("GradientBoostingRegressor score: {:.4f} ({:.4f})".format(score.mean(), score.std()))

model_gb.fit(X_train, Y_train)

pred_gb = model_gb.predict(X_test)
final_pred_sub_gb = np.expm1(pred_gb)
final_pred_sub_gb

Y_test['생육일별_잎_중량'] = final_pred_sub_gb
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "GradientBoostingRegressor_1218_83(light_delete).zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)

"""## XGBRegressor"""

model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, 
                             gamma=0.0468, 
                             learning_rate=0.05, 
                             max_depth=3, 
                             min_child_weight=1.7817, 
                             n_estimators=2200,
                             reg_alpha=0.4640, 
                             reg_lambda=0.8571,
                             subsample=0.5213, 
                             silent=1,
                             random_state =7, 
                             nthread = -1)

score = rmsle_cv(model_xgb)
xgb_score = score.mean()
print("XGBRegressor score: {:.4f} ({:.4f})".format(score.mean(), score.std()))

model_xgb.fit(X_train, Y_train)

pred_xgb = model_xgb.predict(X_test.values)
final_pred_sub_xgb = np.expm1(pred_xgb)
final_pred_sub_xgb

Y_test['생육일별_잎_중량'] = final_pred_sub_xgb
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "XGBRegressor_1218_80(light_delete).zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)

"""## LGBMRegressor"""

# Kfold Train

model_lgb = lgb.LGBMRegressor(objective='regression',
                              num_leaves=5,
                              learning_rate=0.05, 
                              n_estimators=720,
                              max_bin = 55, 
                              bagging_fraction = 0.8,
                              bagging_freq = 5, 
                              feature_fraction = 0.2319,
                              feature_fraction_seed=9, 
                              bagging_seed=9,
                              min_data_in_leaf =6, 
                              min_sum_hessian_in_leaf = 11)

score = rmsle_cv(model_lgb)
lgb_score = score.mean()
print("LGBMRegressor score: {:.4f} ({:.4f})".format(score.mean(), score.std()))

model_lgb.fit(X_train, Y_train)

pred_lgb = model_lgb.predict(X_test)
final_pred_sub_lgb = np.expm1(pred_lgb)
final_pred_sub_lgb

Y_test['생육일별_잎_중량'] = final_pred_sub_lgb
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "LGBMRegressor_1218_84(light_delete).zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)

"""## RandomForestRegressor"""

model_rf = RandomForestRegressor(n_estimators=3000,
                                 max_depth=4, 
                                 max_features='sqrt',
                                 min_samples_leaf=15, 
                                 min_samples_split=10)

score = rmsle_cv(model_rf)
print("RandomForestRegressor score: {:.4f} ({:.4f})".format(score.mean(), score.std()))

model_rf.fit(X_train, Y_train)

pred_rf = model_rf.predict(X_test)
final_pred_sub_rf = np.expm1(pred_rf)
final_pred_sub_rf

Y_test['생육일별_잎_중량'] = final_pred_sub_rf
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "RandomForestRegressor_1217_5.zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)

"""## Linear Regression"""

model_reg = LinearRegression(n_jobs=-1)

score = rmsle_cv(model_reg)
print("LinearRegression score: {:.4f} ({:.4f})".format(score.mean(), score.std()))

model_reg.fit(X_train, Y_train)

pred_reg = model_reg.predict(X_test)
final_pred_sub_reg = np.expm1(model_reg)
final_pred_sub_reg

Y_test['생육일별_잎_중량'] = final_pred_sub_reg
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "LinearRegression_1217_4.zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)

"""## Ridge Regression"""

model_ridge = Ridge(alpha=0.8, random_state=1)

score = rmsle_cv(model_ridge)
print("Ridge score: {:.4f} ({:.4f})".format(score.mean(), score.std()))

model_ridge.fit(X_train, Y_train)

pred_ridge = model_ridge.predict(X_test)
final_pred_sub_ridge = np.expm1(pred_ridge)
final_pred_sub_ridge

Y_test['생육일별_잎_중량'] = final_pred_sub_ridge
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "RidgeRegression_1217_4.zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)

"""## Lasso Regression"""

model_lasso = Lasso(alpha = 0.01, random_state=1)

score = rmsle_cv(model_lasso)
print("Lasso score: {:.4f} ({:.4f})".format(score.mean(), score.std()))

model_lasso.fit(X_train, Y_train)

pred_lasso = model_lasso.predict(X_test)
final_pred_sub_lasso = np.expm1(pred_lasso)
final_pred_sub_lasso

Y_test['생육일별_잎_중량'] = final_pred_sub_lasso
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "LassoRegression_1217_4.zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)

"""## Elasticnet Regression"""

model_Enet = ElasticNet(alpha=0.03, l1_ratio=0.01, random_state=1)

score = rmsle_cv(model_Enet)
print("ElasticNet score: {:.4f} ({:.4f})".format(score.mean(), score.std()))

model_Enet.fit(X_train, Y_train)

pred_Enet = model_Enet.predict(X_test)
final_pred_sub_Enet = np.expm1(pred_Enet)
final_pred_sub_Enet

Y_test['생육일별_잎_중량'] = final_pred_sub_Enet
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "ElasticnetRegression_1217_4.zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)

"""##### DecisionTreeRegressor"""

model_DTree = DecisionTreeRegressor(max_depth=6, min_samples_split=10, min_samples_leaf=15, random_state=1)

score = rmsle_cv(model_DTree)
print("DecisionTreeRegressor score: {:.4f} ({:.4f})".format(score.mean(), score.std()))

model_DTree.fit(X_train, Y_train)

pred_DTree = model_DTree.predict(X_test)
final_pred_sub_DTree = np.expm1(pred_DTree)
final_pred_sub_DTree

Y_test['생육일별_잎_중량'] = final_pred_sub_DTree
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "DecisionTreeRegressor_1217_4.zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)

"""## Ensemble"""

total_weight = (1./gb_score) + (1./xgb_score) + (1./lgb_score)
pred = (pred_gb * (1./gb_score) + pred_xgb * (1./xgb_score) +  pred_lgb * (1./lgb_score))/total_weight
final_pred_sub_Ensemble = np.expm1(pred)
final_pred_sub_Ensemble

Y_test['생육일별_잎_중량'] = final_pred_sub_Ensemble
Y_test = Y_test.rename(columns={'생육일':'DAT', '생육일별_잎_중량':'predicted_weight_g'})
Y_test

for i in range(5):
  submission = Y_test[i*28:(i*28)+28]
  submission.to_csv("TEST_0" + str(i+1) + ".csv", mode='w', index=False)

import zipfile
path = "/content/drive/MyDrive/01.Competition/03.Create_lettuce_growing_environment_AI/my_submission/09_9type_model/"
file_list = ['TEST_01.csv', 'TEST_02.csv', 'TEST_03.csv', 'TEST_04.csv', 'TEST_05.csv']
with zipfile.ZipFile(path + "Ensemble_1218_80_83_84.zip", 'w') as my_zip:
    for i in file_list:
        my_zip.write(i)
    my_zip.close()

Y_test = Y_test.drop(['predicted_weight_g'], axis=1)